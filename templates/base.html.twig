<!DOCTYPE html>
<html lang="en">
<head>
    <title>CoinLink</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    
    <!-- Importation des polices et du CSS Bootstrap -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,700" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{{ asset('assets/css/style.css') }}">

    <link href="{{ asset('homeBundleAssets/css/font-awesome.css') }}" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="{{ asset('homeBundleAssets/owl-carousel/assets/owl.carousel.min.css') }}" type="text/css">
    <link rel="stylesheet" href="{{ asset('homeBundleAssets/css/homeBundleStyle.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>
        /* Masquer le contenu de la page par défaut */
        .page-content {
            display: none; /* Masqué par défaut */
        }

        /* Style pour les boutons déplaçables */
        .admin-button, .user-button {
            width: 70px; /* Largeur du bouton admin (augmentée) */
            height: 70px; /* Hauteur du bouton admin (augmentée) */
            border-radius: 50%; /* Forme circulaire */
            position: fixed; /* Position fixe */
            cursor: pointer; /* Curseur de pointeur */
            z-index: 1000; /* S'assurer que le bouton est au-dessus des autres éléments */
            display: flex; /* Utiliser flexbox pour centrer le contenu */
            justify-content: center; /* Centre le contenu horizontalement */
            align-items: center; /* Centre le contenu verticalement */
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Ombre autour du bouton */
            animation: pulsate 1.5s infinite; /* Animation pulsante */
        }

        /* Style du bouton admin */
        .admin-button {
            top: 20px; /* Position à 20px du haut */
            right: calc(20px + 2cm); /* Avancé de 2cm vers la gauche */
            background: linear-gradient(45deg, rgba(255, 0, 150, 0.7), rgba(138, 43, 226, 0.7)); /* Dégradé rose-violet */
        }

        /* Style spécifique pour le bouton utilisateur */
        .user-button {
            top: calc(20px + 1cm); /* Position à 1 cm plus bas que le bouton admin */
            right: calc(20px + 2cm + 2cm); /* Position avancée de 2cm à gauche et espacée de 2cm */
            width: 60px; /* Largeur du bouton utilisateur (augmentée) */
            height: 60px; /* Hauteur du bouton utilisateur (augmentée) */
            background: linear-gradient(45deg, rgba(0, 206, 209, 0.7), rgba(0, 123, 255, 0.7)); /* Dégradé bleu-turquoise */
        }

        /* Définition de l'animation de pulsation */
        @keyframes pulsate {
            0% { transform: scale(1); opacity: 0.8; } /* État initial */
            100% { transform: scale(1.5); opacity: 0; } /* État final */
        }

        /* Style du loader */
        .loader {
            position: fixed; /* Position fixe pour le loader */
            top: 50%; /* Centré verticalement */
            left: 50%; /* Centré horizontalement */
            transform: translate(-50%, -50%); /* Ajustement pour le centre */
            width: 100px; /* Largeur du loader */
            height: 100px; /* Hauteur du loader */
            border-radius: 50%; /* Forme circulaire */
            background: linear-gradient(45deg, rgba(0, 206, 209, 0.7), rgba(0, 123, 255, 0.7)); /* Dégradé bleu-turquoise */
            display: flex; /* Utiliser flexbox pour centrer le contenu */
            justify-content: center; /* Centre le contenu horizontalement */
            align-items: center; /* Centre le contenu verticalement */
            color: white; /* Couleur du texte */
            font-size: 36px; /* Taille de la lettre (augmentée) */
            font-weight: bold; /* Épaisseur de la lettre (mise en gras) */
            animation: pulsate 1.5s infinite; /* Animation pulsante */
            z-index: 999; /* S'assurer que le loader est au-dessus des autres éléments */
        }

        .loader::before {
            content: ''; /* Contenu vide pour le pseudo-élément du loader */
            position: absolute; /* Positionnement absolu */
            border-radius: 50%; /* Forme circulaire */
            width: 120px; /* Taille pour l'effet pulsation du loader */
            height: 120px; /* Taille pour l'effet pulsation du loader */
            background: inherit; /* Hérite du style de fond du loader */
            animation: pulsate 1.5s infinite; /* Animation pulsante */
            z-index: -1; /* Position derrière le loader */
        }
    </style>
</head>
       
<body class="bg-light" data-spy="scroll" data-target=".site-navbar-target" data-offset="300">
    {% for label, messages in app.flashes %}
        <div class="d-flex justify-content-center align-items-center alert alert-{{ label }} flash-message">
            {% for message in messages %}
                {{ message }}
            {% endfor %}
        </div>
    {% endfor %}

    <div class="page-content">
        {% block body %}{% endblock %}
    </div>

    {% if is_granted('ROLE_ADMIN') %}
        <!-- Bouton admin déplaçable -->
        <div id="adminButton" class="admin-button" 
             onclick="window.location.href = '{{ app.request.uri == path('admin_dashboard') ? '/' : path('admin_dashboard') }}';">
        </div>
    {% endif %}

    {% if is_granted('ROLE_USER') %}
        <!-- Bouton utilisateur déplaçable -->
        <div id="userButton" class="user-button" 
             onclick="window.location.href = '{{ app.request.uri == path('app_dashboard') ? '/' : path('app_dashboard') }}';">
        </div>
    {% endif %}

    {% if is_granted('ROLE_ADMIN') and is_granted('ROLE_USER') %}
        <!-- Bouton utilisateur déplaçable si les deux rôles sont attribués -->
        <div id="userButton" class="user-button" 
             onclick="window.location.href = '{{ app.request.uri == path('app_dashboard') ? '/' : path('app_dashboard') }}';">
        </div>
    {% endif %}

    <!-- Loader -->
    <div class="loader">
        c <!-- Lettre c à l'intérieur du loader -->
    </div>

    {% block javascripts %}
        <script src="{{ asset('assets/js/script.js') }}"></script>
        <script src="{{ asset('homeBundleAssets/js/jquery-3.3.1.slim.min.js') }}"></script>
        <script src="{{ asset('homeBundleAssets/js/popper.min.js') }}"></script>
        <script src="{{ asset('homeBundleAssets/js/bootstrap.min.js') }}"></script>
        <script src="{{ asset('homeBundleAssets/owl-carousel/owl.carousel.min.js') }}"></script>
        <script src="{{ asset('homeBundleAssets/js/main.js') }}"></script>

        <script>
            // Cacher le loader lorsque la page est complètement chargée
            window.addEventListener('load', function() {
                const loader = document.querySelector('.loader'); // Récupération du loader
                loader.style.display = 'none'; // Masquer le loader

                const pageContent = document.querySelector('.page-content'); // Récupération du contenu de la page
                pageContent.style.display = 'block'; // Afficher le contenu de la page
            });

            const adminButton = document.getElementById('adminButton'); // Récupération du bouton admin
            const userButton = document.getElementById('userButton'); // Récupération du bouton utilisateur
            let isDragging = false; // Indicateur de glissement
            let offsetX, offsetY; // Variables pour l'offset

            // Ajout des événements pour chaque bouton
            [adminButton, userButton].forEach(button => {
                button.addEventListener('mousedown', function(e) {
                    isDragging = true; // Démarre le glissement
                    offsetX = e.clientX - button.getBoundingClientRect().left; // Récupération de l'offset X
                    offsetY = e.clientY - button.getBoundingClientRect().top; // Récupération de l'offset Y
                });
            });

            window.addEventListener('mouseup', function() {
                isDragging = false; // Arrête le glissement
            });

            window.addEventListener('mousemove', function(e) {
                if (isDragging) {
                    [adminButton, userButton].forEach(button => {
                        button.style.left = `${e.clientX - offsetX}px`; // Met à jour la position X
                        button.style.top = `${e.clientY - offsetY}px`; // Met à jour la position Y
                    });
                }
            });
        </script>
    {% endblock %}
</body>
</html>
